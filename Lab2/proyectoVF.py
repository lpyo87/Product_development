# Universidad Galileo
# Maestr칤a Inteligencia de Negocios y An치lisis de Datos
# Curso: Product Development
# Secci칩n L
# Jose Manuel Lara Rodas
# Luis Pedro P칠rez Guti칠rrez
# Leonel Eduardo Contreras Gonz치lez


import datetime
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import numpy as np
from dateutil.parser import parse
from statsmodels.graphics.mosaicplot import mosaic

def main():

    # Definir la variable de estado del dataset para poder utilizarlo en los diferentes men칰
    if 'dataset' not in st.session_state:
        st.session_state.dataset = None

    # Mensaje de Bienvenida 
    st.title("Bienvenidos a la aplicaci칩n:")
    st.header("ExploreData")
    
    # Definir el Men칰 con select box al costado de la pantalla
    menu = st.sidebar.selectbox("Men칰:", ["Opciones","1. Cargar Archivo", "2. Analizar Datos"])


    # Valor default del select box
    if menu=="Opciones":

        st.subheader('游녣 Selecciona tu opci칩n en el panel de Men칰')

    # Valor seleccionable del men칰 para cargar archivo tipo CSV o Excel
    if menu == "1. Cargar Archivo":

        st.title('Carga tu dataset: csv o Excel 游녢')

        carga_archivo=st.file_uploader("Cargar un archivo CSV o Excel", type=["csv","xlsx"]) # Comando para cargar el archivo

        # Si ya se cargo el archivo validar que tipo es
        if carga_archivo is not None:

            # Validaci칩n si el archivo es CSV o Excel
            try:
                if carga_archivo.name.endswith('.csv'):
                    dataset= pd.read_csv(carga_archivo)
                    st.session_state.dataset = dataset # Actualizar la variable de estado del dataset para utilizarlo posterior
                elif carga_archivo.name.endswith('.xlsx'):
                    dataset= pd.read_excel(carga_archivo,engine='openpyxl')
                    st.session_state.dataset = dataset # Actualizar la variable de estado del dataset para utilizarlo posterior
                
                st.success("Archivo cargado con 칠xito")
                st.success("Ve al Men칰 y elige: Analizar Datos")
            # Error si el archivo no es CSV o Excel
            except Exception as e:

                st.error("Error al cargar el archivo. Aseg칰rate de que sea un archivo CSV o Excel v치lido.")

    # Valor seleccionable del men칰 para analizar los datos cargados en la opcion anterior, se utiliza la variable de estado
    if menu== "2. Analizar Datos":

        st.title('An치lisis y exploraci칩n de datos')
 

        dataset=st.session_state.dataset # Definir el dataset como el valor que trae la variable de estado en el men칰 anterior

        # Informaci칩n General del dataset
        st.subheader('Dataset:')
        st.dataframe(dataset)
        st.subheader('Dimensi칩n del Dataset:')
        st.write(dataset.shape)
        st.subheader('Tipos de Datos:')

        # Clasificar las variables del dataset
        categoricas = []
        continuas = []
        discretas = []
        fechas = []
        numericas = []



        # Obtener clasificaci칩n de variables
        for colName in dataset.columns:
                if np.issubdtype(dataset[colName].dtype, np.number):
                    if len(dataset[colName].unique()) <= 30:
                        discretas.append(colName)
                        numericas.append(colName)
                    else:
                        continuas.append(colName)
                        numericas.append(colName)
                else:
                    try:
                        if dataset[colName].apply(lambda x: isinstance(parse(x), (datetime.datetime, datetime.date, datetime.time))).all():
                            fechas.append(colName)
                    except Exception as e:
                        categoricas.append(colName)


        # Desplegar tipos de Variables
        st.write("Variables Categ칩ricas")
        st.dataframe({"Variables":categoricas})
        st.write("Variables Num칠ricas Continuas")
        st.dataframe({"Variables":continuas})
        st.write("Variables Num칠ricas Discretas")
        st.dataframe({"Variables":discretas})
        st.write("Variables Tipo Temporales")
        st.dataframe({"Variables":fechas})

        st.markdown('<hr>', unsafe_allow_html=True)
        
        # Desplegar informaci칩n de variables n칰mericas
        st.subheader('Informaci칩n estad칤stica de las variables')
        st.markdown("Selecciona la variable")
        variable=st.selectbox("Variable: ",numericas) # Seleccionar que variable se quiere obtener info.
        st.write(f'El valor m칤nimo de la variable {variable} es : {dataset[variable].min()}')
        st.write(f'El valor m치ximo de la variable {variable} es : {dataset[variable].max()}')
        st.write(f'El promedio de la variable {variable} es : {round(dataset[variable].mean(),2)}')
        st.write(f'La desviaci칩n est치ndar de la variable {variable} es : {round(dataset[variable].std(),2)}')
        
        st.markdown('<hr>', unsafe_allow_html=True)

        # Graficas Individuales
        st.subheader('Graficas de variables individuales')

        # Seleccionar variable continua
        st.markdown("Selecciona la variable **continua** que deseas graficar")
        var_continua=st.selectbox("Variable (Continua):", continuas, key="var_continua")

        # Grafica de densidad para la variable elegida
        fig1 = plt.figure(figsize=(10, 4))
        sns.histplot(dataset[var_continua], kde=True, color="skyblue")

        plt.axvline(np.mean(dataset[var_continua]), color='red', linestyle='dashed', label="Media")
        plt.axvline(np.median(dataset[var_continua]), color='green', linestyle='dashed', label="Mediana")
        plt.axvline(np.std(dataset[var_continua]), color='blue', linestyle='dashed', label="Desv")
        plt.axvline(np.var(dataset[var_continua]), color='orange', linestyle='dashed', label="Var.")
        plt.legend()

        plt.title(f"Densidad de {var_continua}")
        st.pyplot(fig1, clear_figure=True)

        st.markdown('<hr>', unsafe_allow_html=True)

        # Seleccionar variable discreta
        st.write("Selecciona la variable **discreta** que deseas graficar")
        var_discreta=st.selectbox("Variable: ", discretas)

        if var_discreta:
            # Obtener la moda
            moda_result = stats.mode(dataset[var_discreta])
            moda = moda_result.mode

            # Grafica de histograma para la variable elegida
            fig2 = plt.figure(figsize=(10, 4))
            sns.histplot(dataset[var_discreta], color="skyblue")

            plt.axvline(np.mean(dataset[var_discreta]), color='red', linestyle='dashed', label="Media")
            plt.axvline(np.median(dataset[var_discreta]), color='green', linestyle='dashed', label="Mediana")
            plt.axvline(moda, color='black', linestyle='dashed', label="Moda")
            plt.axvline(np.std(dataset[var_discreta]), color='blue', linestyle='dashed', label="Desv")
            plt.axvline(np.var(dataset[var_discreta]), color='orange', linestyle='dashed', label="Var.")
            plt.legend()

            plt.title(f"Histograma de {var_discreta} ")
            st.pyplot(fig2, clear_figure=True)
        else:   
            st.warning("No hay variables discretas en el conjunto de datos.")

        st.markdown('<hr>', unsafe_allow_html=True)

        # Seleccionar variables categoricas
        st.write("Selecciona la variable **categ칩rica** que deseas graficar")
        var_categorica = st.selectbox("Variable categ칩rica:", categoricas, key="selectbox_var_categorica")

        # Verificar si el usuario ha seleccionado una variable categ칩rica
        if var_categorica:
            # Conteo de categorias
            count_data = dataset[var_categorica].value_counts().reset_index()
            count_data.columns = ['Categor칤a', 'Conteo'] 

            # Grafica de barras para la variable elegida
            fig3 = plt.figure(figsize=(10, 4))
            sns.barplot(x='Categor칤a', y='Conteo', data=count_data)

            plt.title(f"Barras de {var_categorica}")
            st.pyplot(fig3, clear_figure=True)
        else:
            st.warning("No hay variables categ칩ricas en el conjunto de datos.")

        st.markdown('<hr>', unsafe_allow_html=True)
        
        # Gr치fica de Correlaci칩n
        st.subheader('Gr치fica de Correlaci칩n')

        # Verificar si existen variables discretas
        if not discretas:
            st.warning("No hay variables discretas en el conjunto de datos.")
        else:
            var_x_corr = st.selectbox("Seleccione una variable continua:", continuas)
            var_y_corr = st.selectbox("Seleccione una variable discreta:", discretas)

        # Inicializar las variables var_x_corr y var_y_corr con valores predeterminados
            if var_x_corr is None:
                var_x_corr = continuas[0] if continuas else None
            if var_y_corr is None:
                var_y_corr = discretas[0] if discretas else None

            if var_x_corr and var_y_corr:
            # Verificar que ambas variables sean v치lidas
                if var_x_corr in dataset.columns and var_y_corr in dataset.columns:
                    plot_corr = sns.scatterplot(data=dataset, x=dataset[var_x_corr], y=dataset[var_y_corr])
                    plot_corr.set_xlabel(var_x_corr)
                    plot_corr.set_ylabel(var_y_corr)
                    plot_corr.set_title(f"Gr치fico de dispersi칩n {var_x_corr} vs {var_y_corr}")
                    st.pyplot(plot_corr.figure, clear_figure=True)

                    if var_x_corr == var_y_corr:
                        valor_correlacion = 1
                    else:
                        correlacion = dataset[[var_x_corr, var_y_corr]].corr()
                        valor_correlacion = round(correlacion.loc[var_x_corr, var_y_corr],5)                
                
                    # Mostrar la correlaci칩n en Streamlit
                    st.write(f"Correlaci칩n entre las variables seleccionadas: {valor_correlacion}")
                else:
                    st.warning("Por favor, seleccione variables v치lidas.")

        st.markdown('<hr>', unsafe_allow_html=True)            

        # Gr치fica de Variable Categ칩rica y Variable Continua
        st.subheader('Gr치fica de Variable Categ칩rica y Variable Continua')
        var_x_cat_cont = st.selectbox("Seleccione la variable categ칩rica X:", categoricas)
        var_y_cat_cont = st.selectbox("Seleccione la variable continua Y:", continuas)

        if var_x_cat_cont and var_y_cat_cont:
            plot_box = sns.boxplot(data=dataset, x=var_x_cat_cont, y=var_y_cat_cont)
            plot_box.set_xlabel(var_x_cat_cont)
            plot_box.set_ylabel(var_y_cat_cont)
            plot_box.set_title(f"Gr치fico de distribuci칩n {var_x_cat_cont} vs {var_y_cat_cont}")
            st.pyplot(plot_box.figure, clear_figure=True)
        else:
            st.warning("Por favor, seleccione variables v치lidas.")

        st.markdown('<hr>', unsafe_allow_html=True)
        # Gr치fica de Variable Categ칩rica y Serie Temporal

        st.subheader('Gr치fica de Variable Categ칩rica y Serie Temporal')
        if fechas:
            var_x_cat_temp = st.selectbox("Seleccione la variable categ칩rica X:", categoricas, key="var_x_cat_temp")
            if var_x_cat_temp:
                var_y_cat_temp = st.selectbox("Seleccione la serie temporal Y:", fechas, key="var_y_cat_temp")
                if var_y_cat_temp:
                    line_plot = sns.lineplot(data=dataset, x=var_y_cat_temp, y=var_x_cat_temp)
                    line_plot.set_xlabel(var_y_cat_temp)
                    line_plot.set_ylabel(var_x_cat_temp)
                    line_plot.set_title(f"Gr치fico de l칤nea {var_x_cat_temp} vs {var_y_cat_temp}")
                    st.pyplot(line_plot.figure, clear_figure=True)
                else:
                    st.warning("Por favor, seleccione una variable de serie temporal.")
            else:
                st.warning("Por favor, seleccione una variable categ칩rica.")
        else:       
            st.warning("No hay variables suficientes en el conjunto de datos.")
        
        st.markdown('<hr>', unsafe_allow_html=True)

        # Gr치fica de Variable Categ칩rica y Variable Categ칩rica (Gr치fico de Mosaico)
        st.subheader('Gr치fica de Variable Categ칩rica y Variable Categ칩rica (Gr치fico de Mosaico)')
        var_x_cat3 = st.selectbox("Seleccione la variable categ칩rica X:", categoricas, key="var_x_cat3")
        var_y_cat3 = st.selectbox("Seleccione la variable categ칩rica Y:", categoricas, key="var_y_cat3")

        if not categoricas:
            st.warning("No hay variables categ칩ricas en el conjunto de datos.")
        else:
            fig, ax = plt.subplots()
            cuentas = pd.crosstab(dataset[var_x_cat3], dataset[var_y_cat3])
            cuentas.plot(kind='bar', stacked=True, ax=ax, width=1)
            ax.set_xlabel(var_x_cat3)
            ax.set_ylabel('Frecuencia')
            ax.set_title('Gr치fico de Mosaico')
            st.pyplot(fig, clear_figure=True)

            mosaic(cuentas.stack())
            st.pyplot(clear_figure=True)

            chi2, p, _, _ = stats.chi2_contingency(cuentas)
            n = cuentas.sum().sum()
            k = min(cuentas.shape)
            cramer_v = round((chi2 / (n * (k - 1)))**0.5, 5)
            st.write(f'El coeficiente de contingencia de Cramer es: {cramer_v}')

if __name__ == '__main__':
    main()